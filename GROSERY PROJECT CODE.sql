-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);
select *from suppliers;
desc suppliers;

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);
select *from `categories (1)`;


-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);


-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);


-- 
-- 1️. Customer Insights
-- How many unique customers have placed orders?
SELECT COUNT(DISTINCT customerid) AS unique_customers
FROM orders;

-- Which customers have placed the highest number of orders?
select c.CustomerID,c.Name,count(o.OrderID) as orders_count
from customers c
join orders o on c.CustomerID = o.customerID
group by c.CustomerID,c.name
order by orders_count desc;

-- What is the total and average purchase value per customer?
SELECT 
    c.customerid,
    c.name,
    SUM(od.totalprice) AS total_purchase_value,
    AVG(od.totalprice) AS average_purchase_value
FROM customers c
JOIN orders o 
    ON c.customerid = o.customerid
JOIN orderdetails od 
    ON o.orderid = od.orderid
GROUP BY c.customerid, c.name
ORDER BY total_purchase_value DESC;

-- -- Who are the top 5 customers by total purchase amount?
select c.customerid,c.name,sum(od.totalprice) as total_spent
from customers c
join orders o on c.customerid = o.customerid
join orderdetails od on o.orderid = od.orderid
group by c.customerid,c.name
order by total_spent desc;
-- 2. Product Performance
-- How many products exist in each category?
SELECT cat.CategoryName, COUNT(p.ProductID) AS Product_Count
FROM categories cat
LEFT JOIN products p ON cat.CategoryID = p.CategoryID
GROUP BY cat.CategoryName;
-- What is the average price of products by category?
select cat.categoryname,avg(p.price) as avg_price
from categories cat
join products p on cat.categoryid = p.categoryid
group by cat.categoryname;
-- Which products have the highest total sales volume (by quantity)
select p.name,sum(od.quantity) as total_qty
from products p
join orderdetails od on p.productid = od.productid
group by p.name
order by total_qty desc;
-- What is the total revenue generated by each product?
select p.name,sum(od.totalprice) as revune
from products p
join orderdetails od on p.productid = od.productid
group by p.name
order by revune desc;
-- How do product sales vary by category and supplier
select c.categoryname,s.suppliername,
sum(od.quantity) as qty_sold,
sum(od.totalprice) as total_revune
from products p
join categories c on p.categoryid = c.categoryid
join suppliers s on p.supplierid = s.supplierid
join orderdetails od on p.productid = od.productid
group by c.categoryname, s.suppliername
order by total_revune desc;
-- 3. Sales and Order Trends
-- Total number of orders
SELECT COUNT(*) AS TotalOrders
FROM Orders;
-- Average value per order
SHOW COLUMNS FROM orderdetails;

SELECT AVG(OrderTotal) AS AvgOrderValue
FROM (
    SELECT orderid, SUM(totalprice) AS OrderTotal
    FROM orderdetails
    GROUP BY orderid)
    AS OrderValues;
-- Dates with most orders placed
SELECT orderdate, COUNT(*) AS TotalOrders
FROM orders
GROUP BY orderdate
ORDER BY TotalOrders DESC;
-- Monthly trends in order volume and revenue
SELECT left(o.orderdate,7) as orderMonth,
       COUNT(DISTINCT o.orderid) AS order_volume,
       SUM(od.quantity * od.priceeach) AS TotalRevenue
FROM orders o
JOIN orderdetails od ON o.orderid = od.orderid
GROUP BY orderMonth
ORDER BY orderMonth;
-- Order patterns across weekdays vs weekends
SELECT 
    CASE 
        WHEN DAYOFWEEK(STR_TO_DATE(orderdate, '%Y-%m-%d')) IN (1,7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS DayType,
    COUNT(*) AS TotalOrders
FROM orders
GROUP BY DayType;
-- 4. Supplier Contribution
-- Total number of suppliers
SELECT COUNT(*) AS TotalSuppliers
FROM suppliers;
-- Supplier providing the most products
SELECT s.supplierid, s.suppliername, COUNT(p.productid) AS ProductCount
FROM suppliers s
JOIN products p ON s.supplierid = p.supplierid
GROUP BY s.supplierid, s.suppliername
ORDER BY ProductCount DESC
LIMIT 1;
-- -- Average price of products from each supplier
SELECT s.supplierid, s.suppliername, AVG(p.price) AS AvgProductPrice
FROM suppliers s
JOIN products p ON s.supplierid = p.supplierid
GROUP BY s.supplierid, s.suppliername
ORDER BY AvgProductPrice DESC;
-- Suppliers contributing the most to total sales (by revenue)
SELECT s.supplierid, s.suppliername,
       SUM(od.totalprice) AS TotalRevenue
FROM suppliers s
JOIN products p ON s.supplierid = p.supplierid
JOIN orderdetails od ON p.productid = od.productid
GROUP BY s.supplierid, s.suppliername
ORDER BY TotalRevenue DESC;



-- 5️ Employee Performance

-- Number of employees who processed orders
SELECT COUNT(DISTINCT EmployeeID) AS ActiveEmployees
FROM orders;

-- Employees handling the most orders
SELECT e.employeeid, e.name,
       COUNT(DISTINCT o.OrderID) AS OrdersHandled FROM store_employees e
JOIN orders o ON e.EmployeeID = o.EmployeeID
GROUP BY e.EmployeeID, e.name
ORDER BY OrdersHandled DESC;

-- Total sales value processed by each employee
select e.EmployeeID,e.name,sum(od.totalprice)as totalsales from store_employees e
join orders o on e.EmployeeID = o.EmployeeID
join orderdetails od on o.OrderID = od.OrderID
group by e.EmployeeID,e.name
order by totalsales desc;

-- Average order value handled per employee
select e.EmployeeID,e.name, avg(OrderValue) as avgOrderValue from store_employees e
join orders o on e.EmployeeID = o.EmployeeID
join( 
      select OrderID,sum(priceEACH * Quantity) as ordervalue
      from orderdetails group by OrderID)
      as ordervals on o.OrderID = ordervals.OrderID
      group by e.EmployeeID,e.name order by avgordervalue desc;
      
-- 6. Order Details Deep Dive

-- Relationship between quantity ordered and total price

SELECT quantity, TotalPrice
FROM orderdetails;

-- Average quantity ordered per product
select p.ProductID,p.Name,avg(od.quantity) as avgquantity from products p
join orderdetails od on p.ProductID = od.ProductID
group by p.ProductID,p.Name
order by avgquantity desc;

-- How does the unit price vary across products and orders
select p.ProductID,p.name,od.priceEach from products p
join orderdetails od on p.ProductID = od.ProductID
order by p.name,od.PriceEach;
